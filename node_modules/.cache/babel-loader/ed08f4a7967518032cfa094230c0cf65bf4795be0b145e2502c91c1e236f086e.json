{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n  const {\n    fetchWithCache,\n    loading: transactionsLoading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n_s(usePaginatedTransactions, \"hvAYhZTxnl/pJ31Knq6BzUXHdiM=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","_s","fetchWithCache","loading","transactionsLoading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","invalidateData"],"sources":["/Users/nishthagoswami/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading: transactionsLoading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n\n      return { data: [...previousResponse.data, ...response.data], nextPage: response.nextPage }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,wBAAwBA,CAAA,EAAgC;EAAAC,EAAA;EACtE,MAAM;IAAEC,cAAc;IAAEC,OAAO,EAAEC;EAAoB,CAAC,GAAGL,cAAc,CAAC,CAAC;EACzE,MAAM,CAACM,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGR,QAAQ,CAExD,IAAI,CAAC;EAEf,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC,MAAMW,QAAQ,GAAG,MAAMN,cAAc,CACnC,uBAAuB,EACvB;MACEO,IAAI,EAAEJ,qBAAqB,KAAK,IAAI,GAAG,CAAC,GAAGA,qBAAqB,CAACK;IACnE,CACF,CAAC;IAEDJ,wBAAwB,CAAEK,gBAAgB,IAAK;MAC7C,IAAIH,QAAQ,KAAK,IAAI,IAAIG,gBAAgB,KAAK,IAAI,EAAE;QAClD,OAAOH,QAAQ;MACjB;MAEA,OAAO;QAAEI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAAI,EAAE,GAAGJ,QAAQ,CAACI,IAAI,CAAC;QAAEF,QAAQ,EAAEF,QAAQ,CAACE;MAAS,CAAC;IAC5F,CAAC,CAAC;EACJ,CAAC,EAAE,CAACR,cAAc,EAAEG,qBAAqB,CAAC,CAAC;EAE3C,MAAMQ,cAAc,GAAGhB,WAAW,CAAC,MAAM;IACvCS,wBAAwB,CAAC,IAAI,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEM,IAAI,EAAEP,qBAAqB;IAAEF,OAAO;IAAEI,QAAQ;IAAEM;EAAe,CAAC;AAC3E;AAACZ,EAAA,CA5BeD,wBAAwB;EAAA,QACmBD,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}