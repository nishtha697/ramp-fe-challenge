{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [approvalStates, setApprovalStates] = useState({});\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    // Make sure response is not null before processing it\n    if (response !== null) {\n      // Add 'approved' state to each transaction.\n      const dataWithApprovalState = response.data.map(transaction => ({\n        ...transaction,\n        approved: transaction.approved\n      }));\n      setPaginatedTransactions(previousResponse => {\n        if (previousResponse === null) {\n          return response;\n        }\n        return {\n          data: [...previousResponse.data, ...response.data],\n          nextPage: response.nextPage\n        };\n      });\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n  const setTransactionApproval = useCallback((transactionId, approved) => {\n    setPaginatedTransactions(prevTransactions => {\n      if (prevTransactions === null) {\n        return prevTransactions;\n      }\n      return {\n        ...prevTransactions,\n        data: prevTransactions.data.map(transaction => transaction.id === transactionId ? {\n          ...transaction,\n          approved\n        } : transaction)\n      };\n    });\n  }, []);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    setTransactionApproval\n  };\n}\n_s(usePaginatedTransactions, \"zewfexOHRy5IcYQOAlLtVFC9svo=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","_s","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","approvalStates","setApprovalStates","fetchAll","response","page","nextPage","dataWithApprovalState","data","map","transaction","approved","previousResponse","setTransactionApproval","transactionId","prevTransactions","id","invalidateData"],"sources":["/Users/nishthagoswami/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n  const [approvalStates, setApprovalStates] = useState<Record<string, boolean>>({})\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n    // Make sure response is not null before processing it\n    if(response !== null) {\n      // Add 'approved' state to each transaction.\n      const dataWithApprovalState = response.data.map((transaction) => ({\n        ...transaction,\n        approved: transaction.approved\n      }));\n\n      setPaginatedTransactions((previousResponse) => {\n        if (previousResponse === null) {\n          return response\n        }\n\n        return { data: [...previousResponse.data, ...response.data], nextPage: response.nextPage }\n      })\n    }\n  }, [fetchWithCache, paginatedTransactions])\n\n  const setTransactionApproval = useCallback((transactionId: string, approved: boolean) => {\n    setPaginatedTransactions((prevTransactions) => {\n      if (prevTransactions === null) {\n        return prevTransactions\n      }\n\n      return {\n        ...prevTransactions,\n        data: prevTransactions.data.map((transaction) =>\n          transaction.id === transactionId ? { ...transaction, approved } : transaction\n        ),\n      }\n    })\n  }, [])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, setTransactionApproval }\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,wBAAwBA,CAAA,EAAgC;EAAAC,EAAA;EACtE,MAAM;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACpD,MAAM,CAACK,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGP,QAAQ,CAExD,IAAI,CAAC;EACf,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAA0B,CAAC,CAAC,CAAC;EAEjF,MAAMU,QAAQ,GAAGX,WAAW,CAAC,YAAY;IACvC,MAAMY,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBAAuB,EACvB;MACEQ,IAAI,EAAEN,qBAAqB,KAAK,IAAI,GAAG,CAAC,GAAGA,qBAAqB,CAACO;IACnE,CACF,CAAC;IACD;IACA,IAAGF,QAAQ,KAAK,IAAI,EAAE;MACpB;MACA,MAAMG,qBAAqB,GAAGH,QAAQ,CAACI,IAAI,CAACC,GAAG,CAAEC,WAAW,KAAM;QAChE,GAAGA,WAAW;QACdC,QAAQ,EAAED,WAAW,CAACC;MACxB,CAAC,CAAC,CAAC;MAEHX,wBAAwB,CAAEY,gBAAgB,IAAK;QAC7C,IAAIA,gBAAgB,KAAK,IAAI,EAAE;UAC7B,OAAOR,QAAQ;QACjB;QAEA,OAAO;UAAEI,IAAI,EAAE,CAAC,GAAGI,gBAAgB,CAACJ,IAAI,EAAE,GAAGJ,QAAQ,CAACI,IAAI,CAAC;UAAEF,QAAQ,EAAEF,QAAQ,CAACE;QAAS,CAAC;MAC5F,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACT,cAAc,EAAEE,qBAAqB,CAAC,CAAC;EAE3C,MAAMc,sBAAsB,GAAGrB,WAAW,CAAC,CAACsB,aAAqB,EAAEH,QAAiB,KAAK;IACvFX,wBAAwB,CAAEe,gBAAgB,IAAK;MAC7C,IAAIA,gBAAgB,KAAK,IAAI,EAAE;QAC7B,OAAOA,gBAAgB;MACzB;MAEA,OAAO;QACL,GAAGA,gBAAgB;QACnBP,IAAI,EAAEO,gBAAgB,CAACP,IAAI,CAACC,GAAG,CAAEC,WAAW,IAC1CA,WAAW,CAACM,EAAE,KAAKF,aAAa,GAAG;UAAE,GAAGJ,WAAW;UAAEC;QAAS,CAAC,GAAGD,WACpE;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,cAAc,GAAGzB,WAAW,CAAC,MAAM;IACvCQ,wBAAwB,CAAC,IAAI,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEQ,IAAI,EAAET,qBAAqB;IAAED,OAAO;IAAEK,QAAQ;IAAEc,cAAc;IAAEJ;EAAuB,CAAC;AACnG;AAACjB,EAAA,CApDeD,wBAAwB;EAAA,QACFD,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}