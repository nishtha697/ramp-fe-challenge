{"ast":null,"code":"var _jsxFileName = \"/Users/nishthagoswami/Desktop/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [selectedEmployee, setSelectedEmployee] = useState(EMPTY_EMPLOYEE);\n  const [approvalState, setApprovalState] = useState({});\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions().then(() => {\n        if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n          // Accessing 'data' property of 'paginatedTransactions'\n          const newApprovalState = paginatedTransactions.data.reduce((acc, transaction) => {\n            acc[transaction.id] = transaction.approved; // 'approved' is the property in transaction object\n            return acc;\n          }, {});\n          setApprovalState(newApprovalState);\n        }\n      });\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions, paginatedTransactions]);\n  const setApproved = useCallback((transactionId, approved) => {\n    setApprovalState(prevStatus => ({\n      ...prevStatus,\n      [transactionId]: approved\n    }));\n  }, []);\n  const getApprovalState = useCallback(transactionId => {\n    var _approvalState$transa;\n    return (_approvalState$transa = approvalState[transactionId]) !== null && _approvalState$transa !== void 0 ? _approvalState$transa : false;\n  }, [approvalState]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeeUtils.loading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n          setSelectedEmployee(newValue);\n\n          //Added if  condition to check for \"All Employees\" to fix Bug 4\n          if (newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n            if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n              // Checking if data exists in paginatedTransactions\n              const newApprovalState = paginatedTransactions.data.reduce((acc, transaction) => {\n                acc[transaction.id] = transaction.approved; // Assuming 'approved' is the property in transaction object\n                return acc;\n              }, {});\n              setApprovalState(newApprovalState);\n            }\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n            if (transactionsByEmployee) {\n              // Checking if transactionsByEmployee is not null\n              const newApprovalState = transactionsByEmployee.reduce((acc, transaction) => {\n                acc[transaction.id] = transaction.approved; // Assuming 'approved' is the property in transaction object\n                return acc;\n              }, {});\n              setApprovalState(newApprovalState);\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          setApproved: setApproved,\n          getApprovalState: getApprovalState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), transactions !== null && (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.id) === EMPTY_EMPLOYEE.id && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== undefined &&\n        /*#__PURE__*/\n        //Updated condition for Bug 6\n        _jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZvBCj3qPLCBNI0dKuIr5ppKfhWw=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","selectedEmployee","setSelectedEmployee","approvalState","setApprovalState","transactions","_ref","_paginatedTransaction","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","then","newApprovalState","reduce","acc","transaction","id","approved","setApproved","transactionId","prevStatus","getApprovalState","_approvalState$transa","children","className","fileName","_jsxFileName","lineNumber","columnNumber","isLoading","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","newValue","nextPage","undefined","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/nishthagoswami/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(EMPTY_EMPLOYEE)\n  const [approvalState, setApprovalState] = useState<Record<string, boolean>>({});\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData()\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions().then(() => {\n        if (paginatedTransactions?.data) {  // Accessing 'data' property of 'paginatedTransactions'\n          const newApprovalState = paginatedTransactions.data.reduce((acc, transaction) => {\n            acc[transaction.id] = transaction.approved;  // 'approved' is the property in transaction object\n            return acc;\n          }, {} as Record<string, boolean>);\n          setApprovalState(newApprovalState);\n        }\n      });\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions, paginatedTransactions])\n\n  const setApproved = useCallback((transactionId: string, approved: boolean) => {\n    setApprovalState(prevStatus => ({ ...prevStatus, [transactionId]: approved }))\n  }, [])\n\n  const getApprovalState = useCallback((transactionId: string) => {\n    return approvalState[transactionId] ?? false;\n  }, [approvalState]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={employeeUtils.loading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            setSelectedEmployee(newValue)\n\n            //Added if  condition to check for \"All Employees\" to fix Bug 4\n            if(newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions();\n              if (paginatedTransactions?.data) {  // Checking if data exists in paginatedTransactions\n                const newApprovalState = paginatedTransactions.data.reduce((acc, transaction) => {\n                  acc[transaction.id] = transaction.approved;  // Assuming 'approved' is the property in transaction object\n                  return acc;\n                }, {} as Record<string, boolean>);\n                setApprovalState(newApprovalState);\n              }\n            } else {\n              await loadTransactionsByEmployee(newValue.id)\n              if (transactionsByEmployee) {  // Checking if transactionsByEmployee is not null\n                const newApprovalState = transactionsByEmployee.reduce((acc, transaction) => {\n                  acc[transaction.id] = transaction.approved;  // Assuming 'approved' is the property in transaction object\n                  return acc;\n                }, {} as Record<string, boolean>);\n                setApprovalState(newApprovalState);\n              }\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} setApproved={setApproved} getApprovalState={getApprovalState} />\n\n          {transactions !== null && selectedEmployee?.id === EMPTY_EMPLOYEE.id && paginatedTransactions?.nextPage !== undefined && ( //Updated condition for Bug 6\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}